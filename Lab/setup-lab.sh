#!/bin/bash

# Script de configuration de l'environnement Ansible Lab
# Ce script configure les connexions SSH entre le ma√Ætre et les workers

echo "üöÄ Configuration de l'environnement Ansible Lab..."

# V√©rifier que Docker est disponible
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√© ou n'est pas dans le PATH"
    echo "   Assurez-vous que Docker Desktop est d√©marr√© et que WSL2 est configur√©"
    exit 1
fi

# Nettoyer les conteneurs existants
echo "üßπ Nettoyage de l'environnement existant..."
docker compose down 2>/dev/null || true
docker network prune -f 2>/dev/null || true

# Construire et d√©marrer les conteneurs
echo "üì¶ Construction et d√©marrage des conteneurs..."
docker compose up -d --build

# V√©rifier que les conteneurs sont d√©marr√©s
echo "‚è≥ V√©rification du d√©marrage des conteneurs..."
sleep 15

# V√©rifier l'√©tat des conteneurs
echo "üìä √âtat des conteneurs:"
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

# Obtenir les adresses IP des conteneurs
echo ""
echo "üåê Adresses IP des conteneurs:"
for container in ansible-master node1 node2 node3; do
    if docker ps --format '{{.Names}}' | grep -q "^${container}$"; then
        ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container 2>/dev/null)
        if [ -n "$ip" ]; then
            echo "   $container: $ip"
        else
            echo "   $container: ‚ùå Pas d'IP trouv√©e"
        fi
    else
        echo "   $container: ‚ùå Conteneur non d√©marr√©"
    fi
done

# Copier la cl√© publique vers les workers (avec retry)
echo ""
echo "üîë Configuration des cl√©s SSH..."

# Attendre que SSH soit pr√™t dans tous les conteneurs
echo "   Attente du d√©marrage des services SSH..."
sleep 10

# Obtenir la cl√© publique du ma√Ætre
if docker ps --format '{{.Names}}' | grep -q "^ansible-master$"; then
    PUBLIC_KEY=$(docker exec ansible-master cat /root/.ssh/id_rsa.pub 2>/dev/null)
    
    if [ -z "$PUBLIC_KEY" ]; then
        echo "   ‚ùå Impossible de r√©cup√©rer la cl√© publique du ma√Ætre"
        exit 1
    fi
    
    # Configurer l'acc√®s SSH pour chaque worker
    for node in node1 node2 node3; do
        if docker ps --format '{{.Names}}' | grep -q "^${node}$"; then
            echo "   Configuration SSH pour $node..."
            
            # Retry logic pour la configuration SSH
            retry_count=0
            max_retries=3
            
            while [ $retry_count -lt $max_retries ]; do
                if docker exec $node mkdir -p /root/.ssh 2>/dev/null && \
                   docker exec $node sh -c "echo '$PUBLIC_KEY' > /root/.ssh/authorized_keys" 2>/dev/null && \
                   docker exec $node chmod 700 /root/.ssh 2>/dev/null && \
                   docker exec $node chmod 600 /root/.ssh/authorized_keys 2>/dev/null; then
                    echo "   ‚úÖ SSH configur√© pour $node"
                    break
                else
                    retry_count=$((retry_count + 1))
                    echo "   ‚è≥ Tentative $retry_count/$max_retries pour $node..."
                    sleep 5
                fi
            done
            
            if [ $retry_count -eq $max_retries ]; then
                echo "   ‚ùå √âchec de la configuration SSH pour $node"
            fi
        else
            echo "   ‚ùå Conteneur $node non trouv√©"
        fi
    done
else
    echo "   ‚ùå Conteneur ansible-master non trouv√©"
    exit 1
fi

# Test de connectivit√© r√©seau
echo ""
echo "üîç Test de connectivit√© r√©seau..."
for node in node1 node2 node3; do
    echo "   Test de ping vers $node..."
    if docker exec ansible-master ping -c 2 $node > /dev/null 2>&1; then
        echo "   ‚úÖ $node est joignable"
    else
        echo "   ‚ùå $node n'est pas joignable"
    fi
done

# Test SSH avec retry
echo ""
echo "üîê Test des connexions SSH..."
for node in node1 node2 node3; do
    echo "   Test SSH vers $node..."
    
    retry_count=0
    max_retries=3
    
    while [ $retry_count -lt $max_retries ]; do
        if docker exec ansible-master ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@$node "echo 'SSH OK'" > /dev/null 2>&1; then
            echo "   ‚úÖ SSH vers $node fonctionne"
            break
        else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
                echo "   ‚è≥ Tentative SSH $retry_count/$max_retries pour $node..."
                sleep 3
            fi
        fi
    done
    
    if [ $retry_count -eq $max_retries ]; then
        echo "   ‚ùå SSH vers $node a √©chou√©"
    fi
done

# Test Ansible final
echo ""
echo "üß™ Test final avec Ansible..."
if docker exec ansible-master test -f /ansible-workspace/Chapitre-2-Ansible-Language-Core/01-inventory/hosts; then
    echo "   Test du ping Ansible:"
    docker exec ansible-master bash -c "cd /ansible-workspace/Chapitre-2-Ansible-Language-Core/01-inventory && ansible all -i hosts -m ping" 2>/dev/null || echo "   ‚ö†Ô∏è  Test Ansible √©chou√© - v√©rifiez la configuration"
else
    echo "   ‚ö†Ô∏è  Fichier d'inventory non trouv√©"
fi

echo ""
echo "üéâ Configuration termin√©e!"
echo ""
echo "üìã Commandes utiles:"
echo "   # Acc√©der au conteneur ma√Ætre:"
echo "   docker exec -it ansible-master bash"
echo ""
echo "   # Tester Ansible:"
echo "   docker exec ansible-master bash -c 'cd /ansible-workspace/Chapitre-2-Ansible-Language-Core/01-inventory && ansible all -i hosts -m ping'"
echo ""
echo "   # Voir les logs des conteneurs:"
echo "   docker compose logs"
echo ""
echo "   # Arr√™ter l'environnement:"
echo "   docker compose down"
echo ""
